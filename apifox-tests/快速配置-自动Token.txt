╔═══════════════════════════════════════════════════════════╗
║     Apifox 自动Token配置 - 快速参考卡片                   ║
╚═══════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────┐
│ 第1步：在登录接口添加后置脚本                            │
└─────────────────────────────────────────────────────────┘

  位置：用户登录接口 → 后置操作 → 脚本
  
  脚本内容：
  ┌────────────────────────────────────────────┐
  │ if (pm.response.code === 200) {            │
  │   var data = pm.response.json().data;      │
  │   pm.environment.set(                      │
  │     "accessToken",                         │
  │     data.accessToken                       │
  │   );                                       │
  │   console.log("✅ Token已保存");           │
  │ }                                          │
  └────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────┐
│ 第2步：在其他接口的Header中引用Token                    │
└─────────────────────────────────────────────────────────┘

  位置：任意接口 → Headers 标签页
  
  添加Header：
  ┌────────────────────────────────────────────┐
  │ Key:   Authorization                       │
  │ Value: Bearer {{accessToken}}              │
  │ ✓ 启用                                     │
  └────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────┐
│ 第3步：测试                                              │
└─────────────────────────────────────────────────────────┘

  1️⃣ 调用登录接口
     → 查看控制台输出 "✅ Token已保存"
  
  2️⃣ 查看环境变量
     → accessToken 应该有值
  
  3️⃣ 调用其他需要认证的接口
     → 应该成功（自动携带了Token）


╔═══════════════════════════════════════════════════════════╗
║  完整版脚本（复制粘贴到登录接口的后置脚本中）              ║
╚═══════════════════════════════════════════════════════════╝

if (pm.response.code === 200) {
    try {
        var jsonData = pm.response.json();
        if (jsonData.code === 200 && jsonData.data) {
            // 保存Token
            pm.environment.set("accessToken", jsonData.data.accessToken);
            
            // 保存用户信息（可选）
            if (jsonData.data.user) {
                pm.environment.set("userId", jsonData.data.user.id);
                pm.environment.set("userName", jsonData.data.user.name);
            }
            
            console.log("✅ 登录成功！Token已自动保存");
        }
    } catch (e) {
        console.error("❌ 脚本执行失败:", e);
    }
}


╔═══════════════════════════════════════════════════════════╗
║  常见问题                                                  ║
╚═══════════════════════════════════════════════════════════╝

Q: Token没有自动保存？
A: 检查后置脚本是否添加正确，查看控制台是否有错误

Q: 其他接口返回401？
A: 检查Header是否添加了 Authorization: Bearer {{accessToken}}

Q: Token过期了？
A: 重新调用登录接口，Token会自动更新


╔═══════════════════════════════════════════════════════════╗
║  🎉 配置完成后的效果                                       ║
╚═══════════════════════════════════════════════════════════╝

  登录1次 → Token自动保存 → 所有接口自动携带
  
  无需手动复制粘贴Token！

═══════════════════════════════════════════════════════════

